def warn(*args, **kwargs):    passimport warningswarnings.warn = warn#import gen_population as popimport facility_ABMimport pandas as pdimport geopandas as gpd"""run_poli_init_test.pycode to run the facility placement abm"""import numpy as np import pandas as pd import geopandas as gpdimport argparsefrom shapely.errors import ShapelyDeprecationWarningwarnings.filterwarnings("ignore", category=ShapelyDeprecationWarning)import shapely as shpfrom shapely.geometry import Pointfrom matplotlib import pyplot as pltfrom sklearn.neighbors import NearestNeighborsfrom shapely.ops import nearest_pointsfrom copy import deepcopyfrom facility_ABM import *from multiprocessing import Pool,freeze_supportfrom pathlib import PathEPSG_LON_LAT = 4326 # the EPSG which represents pairs of lon lat pointsdef get_parser():    parser = argparse.ArgumentParser(        usage=f"python {__name__}.py"        )    parser.add_argument(        "--n_facilities",        type=int,        default=1070    )    parser.add_argument(        "--runs",        type=int,        default=1    )    parser.add_argument(        "--legal_states_only",        #type=bool,        action=argparse.BooleanOptionalAction,    )    parser.add_argument(        "--pop_size",        type=int,        default=-1#if set to -1, the full population will be used    )    parser.add_argument(        "--move_type",        type=str,        default='pres_weighted', # 'random', 'pres_weighted'    )    return parserdef main(    n_facilities: int = 1070,    runs: int = 100,    legal_states_only: bool = True,    out_path: Path = Path("./"),    pop_size: int = -1,    beta: int = 1,    move_type: str = 'random',  # 'pres_weighted'    min_portion: float = 0.3, # Threshold for a weighted county to be included):    legal_states_only=False    obj_vals = []    """    GLOBAL VARIABLES    """    COUNTY_SHP_FILE = "data/UScounties/UScounties.shp"    BANNED_STATES = ['Arkansas','Alabama','Idaho','Kentucky','Louisiana','Kentucky','Mississippi','Missouri','Oklahoma','South Dakota','Tenesee','Texas','West Virginia','Wisconsin']    EPSG = 4    if beta <= 0:        EXTREMUM = "MAX"    else:        EXTREMUM = "MIN"    """"    init the model for a single facility    """    print("loading pop point data...")    df_pop = pd.read_csv("data/simulated_pop_points.csv")    gdf_pop = gpd.GeoDataFrame(df_pop,geometry = gpd.points_from_xy(df_pop.lon,df_pop.lat)).rename(columns = {"Unnamed: 0":"index"}).set_crs(EPSG_LON_LAT)#.rename(columns ={" Unnamed: 0",'index'})#generate initial facility placement    full_pop_size = gdf_pop.shape[0]    #load population size    if (pop_size == -1) or (pop_size > full_pop_size):        print("setting population size to full:{}".format(full_pop_size))        pop_size = full_pop_size    gdf_pop = gdf_pop.sample(pop_size)#cut the sample size down    print("loaded population points containing {} points".format(pop_size))    bounds = load_county_bounds(COUNTY_SHP_FILE, legal_only=legal_states_only)    weights = pres_vote_weight(min_portion=min_portion, legal_only=legal_states_only)    df_state_legal = bounds    #pull out polygon    # us_border = df_state.dissolve().geometry.values[0]#extract shapley polygons from dataframe    for i in range(runs):        print(f"i: {i}")        if move_type == 'pres_weighted':            fac_placements_df = random_points_weighted(df_state_legal, n_facilities, weights).reset_index()        else:            fac_placements_df = random_points_within_polygon(us_legal_border,n_facilities).reset_index()#            #calculate the distance to the nearest facility        fac_pop_dist_df = calc_facility_distance(gdf_pop,fac_placements_df)        objective_function_val = objective_function(fac_pop_dist_df,'distance','nearest_fac', beta)        objective_function_val = objective_function_val / n_facilities        obj_vals.append(objective_function_val)        plot_facility_placement(fac_placements_df)    print(f"For {runs} {move_type} runs, the average obj. fun. score was {np.mean(obj_vals)}")    if legal_states_only:        states = "legal"    else:        states = "all"    out = out_path / f"{states}_0steps_political{str(np.round(min_portion*100))}.parq"    print(out)    fac_placements_df.to_parquet(out)if __name__=="__main__":    __spec__ = None    freeze_support()    main(**vars(get_parser().parse_args()))